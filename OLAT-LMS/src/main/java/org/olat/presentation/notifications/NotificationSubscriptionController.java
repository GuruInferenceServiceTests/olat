/**
 * OLAT - Online Learning and Training<br>
 * http://www.olat.org
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); <br>
 * you may not use this file except in compliance with the License.<br>
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing,<br>
 * software distributed under the License is distributed on an "AS IS" BASIS, <br>
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>
 * See the License for the specific language governing permissions and <br>
 * limitations under the License.
 * <p>
 * Copyright (c) frentix GmbH<br>
 * http://www.frentix.com<br>
 * <p>
 */
package org.olat.presentation.notifications;

import java.util.List;

import org.olat.data.basesecurity.Identity;
import org.olat.data.notifications.Subscriber;
import org.olat.lms.notifications.NotificationService;
import org.olat.lms.notifications.NotificationServiceEBL;
import org.olat.presentation.framework.core.UserRequest;
import org.olat.presentation.framework.core.components.Component;
import org.olat.presentation.framework.core.components.table.Table;
import org.olat.presentation.framework.core.components.table.TableController;
import org.olat.presentation.framework.core.components.table.TableEvent;
import org.olat.presentation.framework.core.components.table.TableGuiConfiguration;
import org.olat.presentation.framework.core.components.velocity.VelocityContainer;
import org.olat.presentation.framework.core.control.Controller;
import org.olat.presentation.framework.core.control.WindowControl;
import org.olat.presentation.framework.core.control.controller.BasicController;
import org.olat.presentation.framework.core.control.generic.modal.DialogBoxController;
import org.olat.presentation.framework.core.control.generic.modal.DialogBoxUIFactory;
import org.olat.presentation.framework.core.translator.PackageUtil;
import org.olat.presentation.home.HomeMainController;
import org.olat.system.event.Event;
import org.olat.system.spring.CoreSpringFactory;

/**
 * Description:<br>
 * This controller shows the list of the users subscriptions and allows him to manage (delete) them. This controller does not show the actual news generated by the
 * subscriptions, use the NotificationNewsController for this purpose.
 * <p>
 * Events fired by this controller:
 * <ul>
 * <li>Event.CHANGED_EVENT when a subscription has been deleted</li>
 * </ul>
 * <P>
 * Initial Date: 22.12.2009 <br>
 * 
 * @author gnaegi
 */
public class NotificationSubscriptionController extends BasicController {
    private final VelocityContainer subscriptionsVC;
    private final TableController subscriptionsTableCtr;
    private final NotificationSubscriptionTableDataModel subscriptionsTableModel;
    private DialogBoxController delYesNoC;
    private final Identity subscriberIdentity;

    protected NotificationSubscriptionController(final Identity subscriberIdentity, final UserRequest ureq, final WindowControl wControl) {
        // use home fallback for rss translations
        super(ureq, wControl, PackageUtil.createPackageTranslator(HomeMainController.class, ureq.getLocale()));
        this.subscriberIdentity = subscriberIdentity;
        // Build the table that contains all the subscriptions
        final TableGuiConfiguration tableGuiPrefs = new TableGuiConfiguration();
        tableGuiPrefs.setTableEmptyMessage(translate("subscriptions.no.subscriptions"));
        subscriptionsTableCtr = new TableController(tableGuiPrefs, ureq, wControl, getTranslator());
        subscriptionsTableModel = new NotificationSubscriptionTableDataModel(getTranslator());
        subscriptionsTableModel.addTableColumns(subscriptionsTableCtr);
        updateSubscriptionsDataModel();
        listenTo(subscriptionsTableCtr);
        // Main view is a velocity container
        subscriptionsVC = createVelocityContainer("notificationsSubscriptions");
        subscriptionsVC.put("subscriptionsTableCtr", subscriptionsTableCtr.getInitialComponent());
        putInitialPanel(subscriptionsVC);
    }

    /**
     * Update the table model
     * 
     * @param ureq
     */
    void updateSubscriptionsDataModel() {
        NotificationServiceEBL notificationServiceEBL = new NotificationServiceEBL();
        List<Subscriber> subs = notificationServiceEBL.getSubscribers(subscriberIdentity);
        subscriptionsTableModel.setObjects(subs);
        // Tell table about model change or set table model if not already set
        if (subscriptionsTableCtr.getTableDataModel() == null) {
            subscriptionsTableCtr.setTableDataModel(subscriptionsTableModel);
        } else {
            subscriptionsTableCtr.modelChanged(true);
        }
    }

    private static NotificationService getNotificationService() {
        return (NotificationService) CoreSpringFactory.getBean(NotificationService.class);
    }

    /**
	 */
    @Override
    protected void doDispose() {
        // controllers disposed by basic controller
    }

    /**
	 */
    @Override
    protected void event(final UserRequest ureq, final Component source, final Event event) {
        // no events to catch
    }

    /**
	 */
    @Override
    protected void event(final UserRequest ureq, final Controller source, final Event event) {
        if (source == subscriptionsTableCtr) {
            if (event.getCommand().equals(Table.COMMANDLINK_ROWACTION_CLICKED)) {
                final TableEvent te = (TableEvent) event;
                final String actionid = te.getActionId();
                final Subscriber sub = subscriptionsTableModel.getObject(te.getRowId());
                if (actionid.equals("launch")) {
                    // User want to go to the subscription source, e.g. the forum or the
                    // folder
                    NotificationUIFactory.launchSubscriptionResource(ureq, getWindowControl(), sub);
                } else if (actionid.equals("del")) {
                    delYesNoC = activateYesNoDialog(ureq, null, translate("confirm.delete"), delYesNoC);
                    delYesNoC.setUserObject(sub);
                    return;
                }
            }
        } else if (source == delYesNoC) {
            if (DialogBoxUIFactory.isYesEvent(event)) { // ok
                // Remove subscription and update data model
                final Subscriber sub = (Subscriber) delYesNoC.getUserObject();
                getNotificationService().unsubscribe(sub);
                updateSubscriptionsDataModel();
                showInfo("info.notification.deleted");
                // Notify parent controller
                fireEvent(ureq, Event.CHANGED_EVENT);
            }
            // cleanup dialog
            delYesNoC.dispose();
            delYesNoC = null;
        }
    }

}
