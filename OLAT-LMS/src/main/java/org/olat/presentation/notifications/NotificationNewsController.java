/**
 * OLAT - Online Learning and Training<br>
 * http://www.olat.org
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License"); <br>
 * you may not use this file except in compliance with the License.<br>
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing,<br>
 * software distributed under the License is distributed on an "AS IS" BASIS, <br>
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>
 * See the License for the specific language governing permissions and <br>
 * limitations under the License.
 * <p>
 * Copyright (c) frentix GmbH<br>
 * http://www.frentix.com<br>
 * <p>
 */
package org.olat.presentation.notifications;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

import org.olat.data.basesecurity.Identity;
import org.olat.data.notifications.Subscriber;
import org.olat.lms.notifications.NotificationHelper;
import org.olat.lms.notifications.NotificationService;
import org.olat.lms.notifications.NotificationServiceEBL;
import org.olat.lms.notifications.SubscriptionInfo;
import org.olat.presentation.framework.core.UserRequest;
import org.olat.presentation.framework.core.components.Component;
import org.olat.presentation.framework.core.components.link.Link;
import org.olat.presentation.framework.core.components.link.LinkFactory;
import org.olat.presentation.framework.core.components.velocity.VelocityContainer;
import org.olat.presentation.framework.core.control.Controller;
import org.olat.presentation.framework.core.control.WindowControl;
import org.olat.presentation.framework.core.control.controller.BasicController;
import org.olat.presentation.framework.core.control.generic.dtabs.Activateable;
import org.olat.system.commons.StringHelper;
import org.olat.system.event.Event;
import org.olat.system.spring.CoreSpringFactory;

/**
 * Description:<br>
 * This controller shows the list of the news generated by the users subscriptions. The news interval can be changed by the user by setting an appropriate date. To manage
 * the users subscription the NotificationSubscriptionController can be used.
 * <P>
 * Initial Date: 22.12.2009 <br>
 * 
 * @author gnaegi
 */
class NotificationNewsController extends BasicController implements Activateable {
    private final VelocityContainer newsVC;
    private Date compareDate;
    private String newsType;
    private final Identity subscriberIdentity;
    private final DateChooserController dateChooserCtr;
    private final Link emailLink;
    private Map<Subscriber, SubscriptionInfo> subsInfoMap;

    private final NotificationServiceEBL notificationServiceEBL;
    private final NotificationService notificationService;

    /**
     * Constructor
     * 
     * @param subscriberIdentity
     *            The identity which news are displayed
     * @param ureq
     * @param wControl
     * @param newsSinceDate
     *            The lower date boundary to collect the news or NULL to use the user defined notification interval
     */
    NotificationNewsController(final Identity subscriberIdentity, final UserRequest ureq, final WindowControl wControl, final Date newsSinceDate) {
        super(ureq, wControl);
        this.subscriberIdentity = subscriberIdentity;
        notificationServiceEBL = new NotificationServiceEBL();

        notificationService = getNotificationService();
        if (newsSinceDate == null) {
            compareDate = notificationServiceEBL.getNewsStartDate(ureq.getIdentity());
        } else {
            compareDate = newsSinceDate;
        }
        // Main view is a velocity container
        newsVC = createVelocityContainer("notificationsNews");
        // Fetch data from DB and update datamodel and reuse subscribers
        final List<Subscriber> subs = updateNewsDataModel();
        // Add date and type chooser
        dateChooserCtr = new DateChooserController(ureq, getWindowControl(), new Date());
        dateChooserCtr.setSubscribers(subs);
        listenTo(dateChooserCtr);
        newsVC.put("dateChosserCtr", dateChooserCtr.getInitialComponent());
        // Add email link
        emailLink = LinkFactory.createButton("emailLink", newsVC, this);
        //
        putInitialPanel(newsVC);
    }

    private NotificationService getNotificationService() {
        return (NotificationService) CoreSpringFactory.getBean(NotificationService.class);
    }

    /**
     * Update the new data model and refresh the GUI
     */
    List<Subscriber> updateNewsDataModel() {
        final List<Subscriber> subs = notificationService.getSubscribers(subscriberIdentity);
        if (StringHelper.containsNonWhitespace(newsType)) {
            for (final Iterator<Subscriber> it = subs.iterator(); it.hasNext();) {
                if (!newsType.equals(it.next().getPublisher().getType())) {
                    it.remove();
                }
            }
        }

        newsVC.contextPut("subs", subs);
        subsInfoMap = NotificationHelper.getSubscriptionMap(getIdentity(), getLocale(), true, compareDate);
        final NotificationSubscriptionAndNewsFormatter subsFormatter = new NotificationSubscriptionAndNewsFormatter(compareDate, getTranslator(), subsInfoMap);
        newsVC.contextPut("subsFormatter", subsFormatter);
        return subs;
    }

    /**
	 */
    @Override
    protected void event(final UserRequest ureq, final Controller source, final Event event) {
        if (source == dateChooserCtr) {
            if (event == Event.CHANGED_EVENT) {
                compareDate = dateChooserCtr.getChoosenDate();
                newsType = dateChooserCtr.getType();
                updateNewsDataModel();
            }
        }
    }

    /**
	 */
    @Override
    protected void event(final UserRequest ureq, final Component source, final Event event) {
        if (source == emailLink) {
            boolean mailSent = notificationServiceEBL.sendMailToUserAndUpdateSubscriber(subscriberIdentity, getLocale(), compareDate,
                    translate("rss.title", new String[] { NotificationHelper.getFormatedName(subscriberIdentity) }));
            if (mailSent) {
                showInfo("email.ok");
            } else {
                showError("email.nok");
            }
        }
    }

    /**
     * Can set type and date of the controller: identifier in the ofrm of [type=Type:0][date=yyyymmdd:0]
     * 
     */
    @Override
    public void activate(final UserRequest ureq, final String viewIdentifier) {
        if (viewIdentifier == null) {
            return;
        }

        boolean changed = false;
        for (final StringTokenizer tokenizer = new StringTokenizer(viewIdentifier, "[]"); tokenizer.hasMoreTokens();) {
            final String token = tokenizer.nextToken();
            if (token.startsWith("type=")) {
                newsType = extractValue("type=", token);
                dateChooserCtr.setType(newsType);
                changed = true;
            } else if (token.startsWith("date=")) {
                try {
                    final String date = extractValue("date=", token);
                    final DateFormat format = new SimpleDateFormat("yyyyMMdd");
                    compareDate = format.parse(date);
                    dateChooserCtr.setDate(compareDate);
                    changed = true;
                } catch (final ParseException e) {
                    e.printStackTrace();
                }
            }
        }

        if (changed) {
            updateNewsDataModel();
        }
    }

    private String extractValue(final String str, final String identifier) {
        if (identifier.startsWith(str)) {
            final int sepIndex = identifier.indexOf(':');
            final int lastIndex = (sepIndex > 0 ? sepIndex : identifier.length());
            final String value = identifier.substring(str.length(), lastIndex);
            return value;
        }
        return null;
    }

    /**
	 */
    @Override
    protected void doDispose() {
        // child controllers disposed by basic controller
    }
}
